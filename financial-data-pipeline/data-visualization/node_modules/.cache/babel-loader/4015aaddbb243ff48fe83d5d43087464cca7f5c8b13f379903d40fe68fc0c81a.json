{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:8081/api\";\nexport const fetchMarketSummary = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/analysis/trends`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Адаптирај ги податоците за dashboard\n    return {\n      trend: data.market_trend,\n      confidence: data.confidence,\n      volume: 153287000,\n      // Пример податоци\n      activeSymbols: data.symbol_trends.length,\n      chartData: generateDummyChartData(7) // Функција што создава dummy податоци\n    };\n  } catch (error) {\n    console.error(\"Error fetching market summary:\", error);\n    throw error;\n  }\n};\nexport const fetchTopGainers = async () => {\n  // Во реалноста, ова би бил API повик до серверот\n  // Враќаме пример податоци за UI демонстрација\n  return [{\n    symbol: \"AAPL\",\n    price: 150.25,\n    change: 3.75,\n    percentChange: 2.56\n  }, {\n    symbol: \"MSFT\",\n    price: 280.45,\n    change: 5.23,\n    percentChange: 1.9\n  }, {\n    symbol: \"GOOGL\",\n    price: 2750.8,\n    change: 45.3,\n    percentChange: 1.67\n  }, {\n    symbol: \"AMZN\",\n    price: 3320.15,\n    change: 48.75,\n    percentChange: 1.49\n  }, {\n    symbol: \"FB\",\n    price: 325.85,\n    change: 4.25,\n    percentChange: 1.32\n  }];\n};\nexport const fetchTopLosers = async () => {\n  // Пример податоци\n  return [{\n    symbol: \"IBM\",\n    price: 142.65,\n    change: -2.35,\n    percentChange: -1.62\n  }, {\n    symbol: \"INTC\",\n    price: 53.8,\n    change: -0.75,\n    percentChange: -1.37\n  }, {\n    symbol: \"CSCO\",\n    price: 56.42,\n    change: -0.68,\n    percentChange: -1.19\n  }, {\n    symbol: \"GE\",\n    price: 104.3,\n    change: -1.2,\n    percentChange: -1.14\n  }, {\n    symbol: \"NFLX\",\n    price: 587,\n    change: -0.62,\n    percentChange: -1.22\n  }];\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchMarketSummary","response","fetch","ok","Error","status","data","json","trend","market_trend","confidence","volume","activeSymbols","symbol_trends","length","chartData","generateDummyChartData","error","console","fetchTopGainers","symbol","price","change","percentChange","fetchTopLosers"],"sources":["/home/nilievska/Documents/Workspace/dians-project/financial-data-pipeline/data-visualization/src/services/apiService.js"],"sourcesContent":["const API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || \"http://localhost:8081/api\";\n\nexport const fetchMarketSummary = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/analysis/trends`);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    // Адаптирај ги податоците за dashboard\n    return {\n      trend: data.market_trend,\n      confidence: data.confidence,\n      volume: 153287000, // Пример податоци\n      activeSymbols: data.symbol_trends.length,\n      chartData: generateDummyChartData(7), // Функција што создава dummy податоци\n    };\n  } catch (error) {\n    console.error(\"Error fetching market summary:\", error);\n    throw error;\n  }\n};\n\nexport const fetchTopGainers = async () => {\n  // Во реалноста, ова би бил API повик до серверот\n  // Враќаме пример податоци за UI демонстрација\n  return [\n    { symbol: \"AAPL\", price: 150.25, change: 3.75, percentChange: 2.56 },\n    { symbol: \"MSFT\", price: 280.45, change: 5.23, percentChange: 1.9 },\n    { symbol: \"GOOGL\", price: 2750.8, change: 45.3, percentChange: 1.67 },\n    { symbol: \"AMZN\", price: 3320.15, change: 48.75, percentChange: 1.49 },\n    { symbol: \"FB\", price: 325.85, change: 4.25, percentChange: 1.32 },\n  ];\n};\n\nexport const fetchTopLosers = async () => {\n  // Пример податоци\n  return [\n    { symbol: \"IBM\", price: 142.65, change: -2.35, percentChange: -1.62 },\n    { symbol: \"INTC\", price: 53.8, change: -0.75, percentChange: -1.37 },\n    { symbol: \"CSCO\", price: 56.42, change: -0.68, percentChange: -1.19 },\n    { symbol: \"GE\", price: 104.3, change: -1.2, percentChange: -1.14 },\n    { symbol: \"NFLX\", price: 587, change: -0.62, percentChange: -1.22 },\n  ];\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAChBC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;AAEnE,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,kBAAkB,CAAC;IAE/D,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;IAElC;IACA,OAAO;MACLC,KAAK,EAAEF,IAAI,CAACG,YAAY;MACxBC,UAAU,EAAEJ,IAAI,CAACI,UAAU;MAC3BC,MAAM,EAAE,SAAS;MAAE;MACnBC,aAAa,EAAEN,IAAI,CAACO,aAAa,CAACC,MAAM;MACxCC,SAAS,EAAEC,sBAAsB,CAAC,CAAC,CAAC,CAAE;IACxC,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC;EACA;EACA,OAAO,CACL;IAAEC,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE,MAAM;IAAEC,MAAM,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAK,CAAC,EACpE;IAAEH,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE,MAAM;IAAEC,MAAM,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAI,CAAC,EACnE;IAAEH,MAAM,EAAE,OAAO;IAAEC,KAAK,EAAE,MAAM;IAAEC,MAAM,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAK,CAAC,EACrE;IAAEH,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE,OAAO;IAAEC,MAAM,EAAE,KAAK;IAAEC,aAAa,EAAE;EAAK,CAAC,EACtE;IAAEH,MAAM,EAAE,IAAI;IAAEC,KAAK,EAAE,MAAM;IAAEC,MAAM,EAAE,IAAI;IAAEC,aAAa,EAAE;EAAK,CAAC,CACnE;AACH,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC;EACA,OAAO,CACL;IAAEJ,MAAM,EAAE,KAAK;IAAEC,KAAK,EAAE,MAAM;IAAEC,MAAM,EAAE,CAAC,IAAI;IAAEC,aAAa,EAAE,CAAC;EAAK,CAAC,EACrE;IAAEH,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE,CAAC,IAAI;IAAEC,aAAa,EAAE,CAAC;EAAK,CAAC,EACpE;IAAEH,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE,KAAK;IAAEC,MAAM,EAAE,CAAC,IAAI;IAAEC,aAAa,EAAE,CAAC;EAAK,CAAC,EACrE;IAAEH,MAAM,EAAE,IAAI;IAAEC,KAAK,EAAE,KAAK;IAAEC,MAAM,EAAE,CAAC,GAAG;IAAEC,aAAa,EAAE,CAAC;EAAK,CAAC,EAClE;IAAEH,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE,CAAC,IAAI;IAAEC,aAAa,EAAE,CAAC;EAAK,CAAC,CACpE;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}