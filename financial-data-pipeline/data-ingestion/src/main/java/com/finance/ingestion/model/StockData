package com.finance.ingestion.model;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;

import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.PrimaryKeyClass;
import org.springframework.data.cassandra.core.mapping.PrimaryKeyColumn;
import org.springframework.data.cassandra.core.cql.PrimaryKeyType;

@Entity
@Table(name = "stock_data")
@org.springframework.data.cassandra.core.mapping.Table("stock_data")
public class StockData {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @PrimaryKey
    @Transient
    private StockDataKey key;
    
    private String symbol;
    private BigDecimal price;
    private BigDecimal volume;
    private LocalDateTime timestamp;
    private String source;
    
    public StockData() {
        this.key = new StockDataKey();
    }
    
    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    public StockDataKey getKey() {
        return key;
    }
    
    public void setKey(StockDataKey key) {
        this.key = key;
    }
    
    public String getSymbol() {
        return symbol;
    }
    
    public void setSymbol(String symbol) {
        this.symbol = symbol;
        if (this.key != null) {
            this.key.setSymbol(symbol);
        }
    }
    
    public BigDecimal getPrice() {
        return price;
    }
    
    public void setPrice(BigDecimal price) {
        this.price = price;
    }
    
    public BigDecimal getVolume() {
        return volume;
    }
    
    public void setVolume(BigDecimal volume) {
        this.volume = volume;
    }
    
    public LocalDateTime getTimestamp() {
        return timestamp;
    }
    
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
        if (this.key != null) {
            this.key.setTimestamp(timestamp);
        }
    }
    
    public String getSource() {
        return source;
    }
    
    public void setSource(String source) {
        this.source = source;
        if (this.key != null) {
            this.key.setSource(source);
        }
    }
    
    @PrimaryKeyClass
    public static class StockDataKey {
        
        @PrimaryKeyColumn(name = "symbol", ordinal = 0, type = PrimaryKeyType.PARTITIONED)
        private String symbol;
        
        @PrimaryKeyColumn(name = "timestamp", ordinal = 1, type = PrimaryKeyType.CLUSTERED)
        private LocalDateTime timestamp;
        
        @PrimaryKeyColumn(name = "source", ordinal = 2, type = PrimaryKeyType.CLUSTERED)
        private String source;
        
        public StockDataKey() {
        }
        
        public String getSymbol() {
            return symbol;
        }
        
        public void setSymbol(String symbol) {
            this.symbol = symbol;
        }
        
        public LocalDateTime getTimestamp() {
            return timestamp;
        }
        
        public void setTimestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
        }
        
        public String getSource() {
            return source;
        }
        
        public void setSource(String source) {
            this.source = source;
        }
        
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((symbol == null) ? 0 : symbol.hashCode());
            result = prime * result + ((timestamp == null) ? 0 : timestamp.hashCode());
            result = prime * result + ((source == null) ? 0 : source.hashCode());
            return result;
        }
        
        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            StockDataKey other = (StockDataKey) obj;
            if (symbol == null) {
                if (other.symbol != null) return false;
            } else if (!symbol.equals(other.symbol)) return false;
            if (timestamp == null) {
                if (other.timestamp != null) return false;
            } else if (!timestamp.equals(other.timestamp)) return false;
            if (source == null) {
                if (other.source != null) return false;
            } else if (!source.equals(other.source)) return false;
            return true;
        }
    }
}